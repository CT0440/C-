28-01-2025
-----------
inputOutputStream<iostream> which contains standard input and standard output.
#include is a preprocessor directive which tells the compiler to get specifice file
like #include<iostream>

cout is used for writes the data to the standared output stream then the streams 
will display on the console.

<<(insetion operator)-sends data to output stream

cin - read data in standard input stream
>>(Extraction operator)-extracts data from input stream
::(scope resolution operator) is used for it tells the compiler to look inside the std 
namespace

***how cpp Works?***
->here this helloworld.cpp file is highlevel programming language(human readable)
that takes by the compiler(g++).
->compiler translates the highlevel to assembly level
language that understanded by machine 
->assembler takes the assembly language file and converts to lowlevl language
(machine code) .
and finally that file called as object code.
->linker takes the object file to produce executable code.
->executable code contains all the machine code instructions required to run the
program i.e script.
->whenever user executes .exe file then it handed to cpu that displays the 
the output on the target system.

namespaces in C++
-----------------
A namespace is a container or a mechnism used in programming to organize and 
group related code elements(such as classes, functions) under a unique identifier.

It  helps prevent naming conflicts and makes code more readable, maintainable and modular.

variables in c++
-----------------
In C++, variable is a name of memory location. it is a basic unit of storage in program.
The value stored in a variable can be accessed or changed during the execution.
Types of Variables
In C++, following are the data types a variable can store:

int: For storing integers or whole numbers.
float: For storing real numbers with decimal points.
char: For storing single characters.
bool: For storing boolean value i.e. true and false.
string: For storing the textual data.
Rules For Naming Variable
The names given to a variable is called identifiers.

There are some rules for giving a name to the variable:
--------------------------------------------------------
* The name of the variable contains letters, digits, and underscores.
* The name of the variable is case sensitive.
 (e.g. Arr and arr both are different variables).
* The name of the variable does not contain any whitespace and special characters (ex #, $, %, *, etc).
* All the variable names must begin with a letter of the alphabet or an underscore (_).
* We cannot used C++ keyword (e.g. float, double, class) as a variable name.

Memory Management of Variables
-------------------------------
* When a variable is declared, the compiler is told about the variable name and the type of
data it will store. It is not allocated the any memory at this point. 
* It is when the variable is defined it is allocated the memory. 
* The amount of memory allocated depends upon the type of data that a variable intends to store.
* Initially, the variable only stores some garbage value (value that does not mean anything).
* At the time of initialization, it is assigned some meaningful value that using the
assignment operator that is then stored in the memory allocated to the function.
* So basically, we are manipulating a specific part of memory using the variable name.

5. Variable Scope and Lifetime
-------------------------------
Scope:
The scope of a variable refers to the region in the code where the variable
can be accessed.
The scope depends on where the variable is declared.

*Local variables: Declared inside a function, they are only accessible within that function.
*Global variables: Declared outside any function, they can be accessed from anywhere in the program.

Lifetime:
The lifetime of a variable refers to how long the variable exists in memory during the program's execution.

*Local variables: Their lifetime starts when the function is called and ends when the function exits.
*Global variables: Their lifetime starts when the program starts and ends when the program terminates.

C++ Data Types
--------------
Data types specify the type of data that a variable can store.
Whenever a variable is defined in C++, the compiler allocates some memory
for that variable based on the data type with which it is declared 
as every data type requires a different amount of memory.
* premitive Data types(integer types, floating-point types, character types, boolen type)

a.integer datatypes
--------------------
int: Used to represent whole numbers, both positive and negative.
Size: Typically 4 bytes (depends on the platform)
Example: int age = 25;

short: A smaller integer type than int.
Size: Typically 2 bytes
Example: short temperature = -5;

long: A larger integer type than int.
Size: Typically 4 or 8 bytes, depending on the platform
Example: long population = 1000000;

long long: A very large integer type.
Size: Typically 8 bytes
Example: long long distance = 9000000000;

unsigned types: Integer types that can only represent non-negative values.
Example: unsigned int count = 100;

b.floating-point types
----------------------
float: Used to represent decimal numbers with single precision.
Size: Typically 4 bytes
Example: float pi = 3.14f;

double: Used to represent decimal numbers with double precision.
Size: Typically 8 bytes
Example: double pi = 3.14159265359;

long double: Used for even more precision than double (platform dependent).
Size: Typically 8 or 12 bytes
Example: long double pi = 3.141592653589793238;

c.character type
-----------------
char: Used to store single characters (e.g., 'a', '1').
Size: Typically 1 byte
Example: char letter = 'A';

unsigned char: Stores non-negative values between 0 and 255.
Size: Typically 1 byte
Example: unsigned char value = 255;

signed char: Stores values from -128 to 127.
Size: Typically 1 byte
Example: signed char value = -100;

wchar_t: Used to store wide characters (e.g., Unicode characters).
Size: Typically 2 or 4 bytes
Example: wchar_t wideChar = L'A';

d. Boolean Type
----------------
bool: Used to store boolean values (true or false).
Size: Typically 1 byte
Example: bool isActive = true;

* Dervied datatypes(array, pointer, reference, function)
* user-defined datatypes(class, struct, union, typedef, using)

Type conversion
----------------
Type conversion means converting one type of data to another compatible type such that it doesnâ€™t lose 
its meaning. 
It is essential for managing different data types in C++.

C++  covers the various methods of type conversion, helping you understand how to handle data types correctly.
In C++, there are two types of type conversion:
* Implicit Type Conversion(coersion)
* Explicit Type Conversion

Implicit Type Conversion
-------------------------
Implicit type conversion (also known as coercion) is the conversion of one type of data to another type 
automatically by the compiler when needed. 
It happens automatically when:
* Operations are performed on values of different data types.
* If you pass an argument to a function that expects a different data type.
* Assigning a value of one data type to a variable of another data type.

limitations
-----------
It is possible for implicit conversions to lose information, 
signs can be lost (when signed is implicitly converted to unsigned), and overflow can occur 
(when long long is implicitly converted to float).

Cases of Implicit Type Conversion
----------------------------------
1. For Numeric Type

All the data types of the variables are upgraded to the data type of the variable with largest data type. 
For numeric type,
bool -> char -> short int -> int ->  unsigned int -> long -> unsigned -> long long -> float -> double -> long double


2. Pointer Conversions

Pointers to derived classes can be converted to pointers to base classes automatically.

3. Boolean Conversion

Any scalar type (integer, floating-point, pointer) is implicitly converted to bool in a context that 
requires a Boolean value (e.g., if, while, for conditions).

Explicit Type Conversion
-------------------------
Explicit type conversion, also called type casting is the conversion of one type of data to another type 
manually by a programmer. 
Here the user can typecast the result to make it of a particular data type. 
In C++, it can be done by two ways:

1. C Style Typecasting
----------------------
This method is inherited by C++ from C. 
The conversion is done by explicitly defining the required type in front of the expression in parenthesis. 
This can be also known as forceful casting.
syntax: (type) expression;

2. C++ Style Typecasting
------------------------
C++ introduced its own typecasting method using cast operators. 
Cast operator is an unary operator which forces one data type to be converted into another data type. 

C++ supports four types of casting:
* Static Cast: Used for standard compile time type conversions.
* Dynamic Cast: Used for runtime type conversion in polymorphism and inheritance.
* Const Cast: Removes or adds const or volatile qualifiers.
* Reinterpret Cast: Used for low-level reinterpretation of bits (e.g., converting pointers).


Risks of Type Conversion
------------------------
Type conversion provides useful functionality to the language but also introduces certain risks:

Data loss that occurs when converting from a larger type to a smaller type (e.g., int to char).
Undefined behavior that happens when casting pointers between unrelated types and dereferencing them.
Violation of const correctness when removing const with const_cast and modifying the variable leads to undefined behavior.
Memory misalignment casting pointers to types with stricter alignment can cause crashes.



29-01-2025
==========
operators
----------
In C++, an operator is a symbol that operates on a value to perform specific mathematical or logical computations 
on given values.

In C++, operators are classified into 6 types on the basis of type of operation they perform:
-Arithmetic Operators
-Relational Operators
-Logical Operators
-Bitwise Operators
-Assignment Operators
-Ternary or Conditional Operators 

### **ðŸ”¹1. Arithmetic Operators in C++**  

| Operator | Name          | Example  |
|----------|-------------- |----------|
| `+`      | Addition      | `a + b`  |
| `-`      | Subtraction   | `a - b`  |
| `*`      | Multiplication| `a * b`  |
| `/`      | Division      | `a / b`  |
| `%`      | Modulus       | `a % b`  |
The Modulo operator (%) operator should only be used with integers.
Other operators can also be used with floating point values.
++a and a++, both are increment operators, however, both are slightly different. 
In ++a, the value of the variable is incremented first and then It is used in the program. 
In a++, the value of the variable is assigned first and then It is incremented. 
Similarly happens for the decrement operator.
You may have noticed that some operator works on two operands while other work on one. 
On the basis of this operators are also classified as:
* Unary: Works on single operand.
* Binary: Works on two operands.
* Ternary: Works on three operands.

2. Relational Operators
---------------------
Here's the table with **Relational Operators** :

| Operator | Description                           | Example        | Result (for `a = 5`, `b = 10`)  |
|----------|---------------------------------------|----------------|---------------------------------|
| `==`     | Equal to                              | `a == b`       | `false` (5 is not equal to 10)  |
| `!=`     | Not equal to                          | `a != b`       | `true` (5 is not equal to 10)   |
| `>`      | Greater than                          | `a > b`        | `false` (5 is not greater than 10) |
| `<`      | Less than                             | `a < b`        | `true` (5 is less than 10)      |
| `>=`     | Greater than or equal to              | `a >= b`       | `false` (5 is not >= 10)       |
| `<=`     | Less than or equal to                 | `a <= b`       | `true` (5 is <= 10)            |



### **3. Logical Operators**

| Operator | Description                        | Example           | Result (for `a = 5`, `b = 10`) |
|----------|------------------------------------|-------------------|--------------------------------|
| `&&`     | Logical AND                        | `a && b`          | `true` (both `a` and `b` are non-zero) |
| `||`     | Logical OR                         | `a || b`          | `true` (at least one of `a` or `b` is non-zero) |
| `!`      | Logical NOT                        | `!a`              | `false` (since `a = 5` which is non-zero) |

---

### **4. Bitwise Operators**

| Operator | Description                        | Example           | Result (for `a = 5 (0101)`, `b = 3 (0011)`) |
|----------|------------------------------------|-------------------|-----------------------------------------------|
| `&`      | Bitwise AND                        | `a & b`           | `1` (0101 & 0011 = 0001)                     |
| `|`      | Bitwise OR                         | `a | b`           | `7` (0101 | 0011 = 0111)                     |
| `^`      | Bitwise XOR                        | `a ^ b`           | `6` (0101 ^ 0011 = 0110)                     |
| `~`      | Bitwise NOT                        | `~a`              | `-6` (~0101 = 1010, signed integer)           |
| `<<`     | Left shift                         | `a << 1`          | `10` (0101 << 1 = 1010)                      |
| `>>`     | Right shift                        | `a >> 1`          | `2` (0101 >> 1 = 0010)                       |


### **5. Assignment Operators**

| Operator | Description                        | Example           | Result (for `a = 5`, `b = 3`) |
|----------|------------------------------------|-------------------|------------------------------|
| `=`      | Simple assignment                  | `a = b`           | `a = 3`                       |
| `+=`     | Add and assign                     | `a += b`          | `a = a + b` (a = 8)           |
| `-=`     | Subtract and assign                | `a -= b`          | `a = a - b` (a = 2)           |
| `*=`     | Multiply and assign                | `a *= b`          | `a = a * b` (a = 15)          |
| `/=`     | Divide and assign                  | `a /= b`          | `a = a / b` (a = 1)           |
| `%=`     | Modulo and assign                  | `a %= b`          | `a = a % b` (a = 2)           |
| `&=`     | Bitwise AND and assign             | `a &= b`          | `a = a & b` (a = 1)           |
| `|=`     | Bitwise OR and assign              | `a |= b`          | `a = a | b` (a = 7)           |
| `^=`     | Bitwise XOR and assign             | `a ^= b`          | `a = a ^ b` (a = 6)           |
| `<<=`    | Left shift and assign              | `a <<= 1`         | `a = a << 1` (a = 10)         |
| `>>=`    | Right shift and assign             | `a >>= 1`         | `a = a >> 1` (a = 2)          |

---

### **6. Miscellaneous Operators**

| Operator | Description                        | Example           | Result (for `a = 5`, `b = 3`) |
|----------|------------------------------------|-------------------|------------------------------|
| `sizeof` | Size of data type or variable     | `sizeof(a)`       | `4` (size of int)            |
| `,`      | Comma (used to separate expressions) | `a = (b++, c++)` | `a = 3` (b is incremented first, then c) |
| `typeid` | Type identification (C++ RTTI)   | `typeid(a).name()` | `int` (type of `a`)          |
| `->`     | Access members of a structure or class through a pointer | `ptr->x`  | Access `x` member of the object pointed by `ptr` |
| `.`      | Access members of a structure or class | `obj.x`        | Access `x` member of object `obj` |
| `[]`     | Array subscript operator          | `arr[2]`         | Access the third element of `arr` |






